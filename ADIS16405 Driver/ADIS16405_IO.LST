ARM COMPILER V2.40c,  ADIS16405_IO                                                         22/04/10  16:31:52  PAGE 1   


ARM COMPILER V2.40c, COMPILATION OF MODULE ADIS16405_IO
OBJECT MODULE PLACED IN ADIS16405_IO.OBJ
COMPILER INVOKED BY: C:\Keil\ARM\BIN\CA.exe ADIS16405_IO.C THUMB BROWSE DEBUG TABS(4) 

stmt  level    source

    1          /***************************************************************************
    2          
    3           Author        : Neil Zhao  - CAST
    4          
    5           Date          : Apr 20th, 2010
    6          
    7           File          : ADIS16405_IO.c
    8          
    9           Hardware      : ADuC7026 and ADIS16405
   10          
   11           Description   : Use the GPIO to simulate the SPI communication of ADIS16405
   12              
   13          ***************************************************************************/
   14          #include<ADuC7026.h>
   15          #include "ADIS16405_IO.h"
   16          
   17          #define SET_CS()        GP4DAT = (GP4DAT | 0x00080000)  //P4.3->/CS
   18          #define CLR_CS()        GP4DAT = (GP4DAT & 0xFFF7FFFF)
   19          
   20          #define SET_SCL()       GP4DAT = (GP4DAT | 0x00100000)  //P4.4->SCLK
   21          #define CLR_SCL()       GP4DAT = (GP4DAT & 0xffefffff)
   22          
   23          #define SET_SDO()       GP4DAT = (GP4DAT | 0x00200000)  //P4.5->DIN
   24          #define CLR_SDO()       GP4DAT = (GP4DAT & 0xffdfffff)
   25          
   26          
   27          //---------------------------------
   28          //WriteToADIS16405ViaSpi();
   29          //---------------------------------
   30          //Function that writes to the ADIS16405 via the SPI port. It sends first the control
   31          //word that includes the start address and then the data to write.
   32          //When writing registers which take up multi-bytes, ADIS16405 must be written one byte by one byte.
   33          //CS must be pulled high and then pulled low before writing the next byte
   34          //--------------------------------------------------------------------------------
   35          void WriteToADIS16405ViaSpi(unsigned char RegisterAddress, unsigned char NumberofRegisters, unsigned char
             - *RegisterData)
   36          {
   37   1          unsigned    char    ControlValue = 0;
   38   1          unsigned    int     ValueToWrite = 0;
   39   1          unsigned    char    RegisterIndex = 0;
   40   1          unsigned    char    i = 0;
   41   1          
   42   1          for(RegisterIndex=0; RegisterIndex<NumberofRegisters*2; RegisterIndex++)//every register of ADIS16405 ta
             -kes up two bytes
   43   1          {
   44   2              //Create the 8-bit header
   45   2              ControlValue = (RegisterAddress + RegisterIndex) | 0x80;
   46   2              SET_SCL();
   47   2              __asm{nop;}
   48   2              SET_CS();
   49   2              __asm{nop;}
   50   2              CLR_CS();
   51   2              __asm{nop;}
   52   2              //Write out the control word
   53   2              for(i=0; i<8; i++)
   54   2              {   
   55   3                  CLR_SCL();
   56   3                  if(0x80 == (ControlValue & 0x80))
   57   3                  {
ARM COMPILER V2.40c,  ADIS16405_IO                                                         22/04/10  16:31:52  PAGE 2   

   58   4                      SET_SDO();      //Send one to DIN pin of ADIS16405
   59   4                  }
   60   3                  else
   61   3                  {
   62   4                      CLR_SDO();      //Send zero to DIN pin of ADIS16405  
   63   4                  }
   64   3                  __asm{nop;}
   65   3                  SET_SCL();
   66   3                  __asm{nop;}
   67   3                  ControlValue <<= 1; //Rotate data   
   68   3              }
   69   2              //And then the data
   70   2              ValueToWrite = *(RegisterData + RegisterIndex);
   71   2              for (i=0; i<8; i++)
   72   2              {
   73   3                  CLR_SCL();
   74   3                  if(0x80 == (ValueToWrite & 0x80))
   75   3                  {
   76   4                      SET_SDO();    //Send one to DIN pin of ADIS16405
   77   4                  }
   78   3                  else
   79   3                  {
   80   4                      CLR_SDO();    //Send zero to DIN pin of ADIS16405
   81   4                  }
   82   3                  __asm{nop;}
   83   3                  SET_SCL();
   84   3                  __asm{nop;}
   85   3                  ValueToWrite <<= 1; //Rotate data
   86   3              }
   87   2              SET_CS();               //bring CS high again
   88   2          }
   89   1      }
   90          
   91          //---------------------------------
   92          //ReadFromADIS16405ViaSpi();
   93          //---------------------------------
   94          //Function that reads from the ADIS16405 via the SPI port. ADIS16405 supports full duplex mode operation.
   95          //It first send the control word that includes the start address which you are going to access and then 8
             - clcoks
   96          //Now,the data on DOUT pin of ADIS16405 is the register which you accessed just before this operation
   97          //Then repeat sending control word and clock, read data at the same time and now
   98          //the data on DOUT pin of ADIS16405 is the register which you are going to read
   99          //CS must be pulled high and then pulled low before reading the next register
  100          //--------------------------------------------------------------------------------
  101          void ReadFromADIS16405ViaSpi(unsigned char RegisterAddress, unsigned char NumberofRegisters, unsigned cha
             -r *RegisterData)
  102          {
  103   1          unsigned    char    ControlValue = 0;
  104   1          unsigned    char    RegisterIndex = 0;
  105   1          unsigned    char    ReceiveData = 0;
  106   1          unsigned    char    i = 0, j = 0;
  107   1          unsigned    int     iTemp = 0;
  108   1      
  109   1          for(RegisterIndex=0; RegisterIndex<NumberofRegisters; RegisterIndex++)
  110   1          {
  111   2              //Create the 8-bit header
  112   2              ControlValue = RegisterAddress + RegisterIndex*2;//every register of ADIS16405 takes up two bytes
  113   2              SET_SCL();
  114   2              __asm{nop;}
  115   2              SET_CS();
  116   2              __asm{nop;}
  117   2              CLR_CS();    //bring CS low
  118   2              __asm{nop;}
  119   2      
  120   2              //Write out the control word
  121   2              for(i=0; i<8; i++)
ARM COMPILER V2.40c,  ADIS16405_IO                                                         22/04/10  16:31:52  PAGE 3   

  122   2              {
  123   3                  CLR_SCL();
  124   3                  if(0x80 == (ControlValue & 0x80))
  125   3                  {
  126   4                      SET_SDO();    //Send one to DIN pin of ADIS16405
  127   4                  }
  128   3                  else
  129   3                  {
  130   4                      CLR_SDO();    //Send zero to DIN pin of ADIS16405
  131   4                  }
  132   3                  __asm{nop;}
  133   3                  SET_SCL();
  134   3                  ReceiveData <<= 1;      //Rotate data
  135   3                  iTemp = GP0DAT;         //Read DOUT of ADIS16405
  136   3                  if(0x00000020 == (iTemp & 0x00000020))
  137   3                  {
  138   4                      ReceiveData |= 1;   
  139   4                  }
  140   3                  __asm{nop;}
  141   3                  ControlValue <<= 1; //Rotate data
  142   3              }
  143   2              *(RegisterData + RegisterIndex*2 + 1) = ReceiveData;
  144   2              //Read data in
  145   2              for(i=0; i<8; i++)
  146   2              {
  147   3                  CLR_SCL();
  148   3                  __asm{nop;}
  149   3                  SET_SCL();
  150   3                  ReceiveData <<= 1;      //Rotate data
  151   3                  iTemp = GP0DAT;         //Read DOUT of ADIS16405
  152   3                  if(0x00000020 == (iTemp & 0x00000020))
  153   3                  {
  154   4                      ReceiveData |= 1;   
  155   4                  }
  156   3                  __asm{nop;}
  157   3      
  158   3              }
  159   2              *(RegisterData + RegisterIndex*2) = ReceiveData;
  160   2              SET_CS();   //bring CS high again
  161   2          }
  162   1      } 
ARM COMPILER V2.40c,  ADIS16405_IO                                                         22/04/10  16:31:52  PAGE 4   

ASSEMBLY LISTING OF GENERATED OBJECT CODE



*** PUBLICS:
 PUBLIC         WriteToADIS16405ViaSpi?T
 PUBLIC         ReadFromADIS16405ViaSpi?T



*** CODE SEGMENT '?PR?WriteToADIS16405ViaSpi?T?ADIS16405_IO':
   35: void WriteToADIS16405ViaSpi(unsigned char RegisterAddress, unsigned char NumberofRegisters, unsigned char *Regist
             -erData)
 00000000  B4F0      PUSH        {R4-R7}
 00000002  ---- Variable 'RegisterData' assigned to Register 'R2' ----
 00000002  ---- Variable 'NumberofRegisters' assigned to Register 'R1' ----
 00000002  ---- Variable 'RegisterAddress' assigned to Register 'R0' ----
 00000002  B081      SUB         R13,#0x4
   36: {
 00000004            ; SCOPE-START
   37:     unsigned    char    ControlValue = 0;
 00000004  2600      MOV         R6,#0x0
 00000006  AB00      ADD         R3,R13,#0x0
 00000008  701E      STRB        R6,[R3,#0x0] ; ControlValue
   38:     unsigned    int     ValueToWrite = 0;
 0000000A  2500      MOV         R5,#0x0
 0000000C  ---- Variable 'ValueToWrite' assigned to Register 'R5' ----
   39:     unsigned    char    RegisterIndex = 0;
 0000000C  1C34      MOV         R4,R6 ; RegisterIndex
 0000000E  ---- Variable 'RegisterIndex' assigned to Register 'R4' ----
   40:     unsigned    char    i = 0;
 0000000E  1C33      MOV         R3,R6 ; i
 00000010  ---- Variable 'i' assigned to Register 'R3' ----
   42:     for(RegisterIndex=0; RegisterIndex<NumberofRegisters*2; RegisterIndex++)//every register of ADIS16405 takes up t
             -wo bytes
 00000010  1C34      MOV         R4,R6 ; RegisterIndex
 00000012  E088      B           L_3  ; T=0x00000126
 00000014          L_4:
   45:         ControlValue = (RegisterAddress + RegisterIndex) | 0x80;
 00000014  1C23      MOV         R3,R4 ; RegisterIndex
 00000016  061B      LSL         R3,R3,#0x18 ; RegisterIndex
 00000018  0E1B      LSR         R3,R3,#0x18
 0000001A  1C06      MOV         R6,R0 ; RegisterAddress
 0000001C  0636      LSL         R6,R6,#0x18 ; RegisterAddress
 0000001E  0E36      LSR         R6,R6,#0x18
 00000020  18F6      ADD         R6,R3
 00000022  2380      MOV         R3,#0x80
 00000024  431E      ORR         R6,R3
 00000026  0636      LSL         R6,R6,#0x18
 00000028  0E36      LSR         R6,R6,#0x18
 0000002A  AB00      ADD         R3,R13,#0x0
 0000002C  701E      STRB        R6,[R3,#0x0] ; ControlValue
   46:         SET_SCL();
 0000002E  4800      LDR         R3,=0xFFFFF460
 00000030  681E      LDR         R6,[R3,#0x0]
 00000032  4800      LDR         R3,=0x100000
 00000034  431E      ORR         R6,R3
 00000036  4800      LDR         R3,=0xFFFFF460
 00000038  601E      STR         R6,[R3,#0x0]
   47:         __asm{nop;}
 0000003A  46C0      NOP         ; MOV R8,R8
   48:         SET_CS();
 0000003C  4800      LDR         R3,=0xFFFFF460
 0000003E  681F      LDR         R7,[R3,#0x0]
 00000040  4800      LDR         R3,=0x80000
 00000042  431F      ORR         R7,R3
 00000044  4800      LDR         R6,=0xFFFFF460
 00000046  6037      STR         R7,[R6,#0x0]
   49:         __asm{nop;}
ARM COMPILER V2.40c,  ADIS16405_IO                                                         22/04/10  16:31:52  PAGE 5   

 00000048  46C0      NOP         ; MOV R8,R8
   50:         CLR_CS();
 0000004A  4800      LDR         R6,=0xFFFFF460
 0000004C  6836      LDR         R6,[R6,#0x0]
 0000004E  439E      BIC         R6,R3
 00000050  4800      LDR         R3,=0xFFFFF460
 00000052  601E      STR         R6,[R3,#0x0]
   51:         __asm{nop;}
 00000054  46C0      NOP         ; MOV R8,R8
   53:         for(i=0; i<8; i++)
 00000056  2300      MOV         R3,#0x0
 00000058  E027      B           L_8  ; T=0x000000AA
 0000005A          L_9:
   55:             CLR_SCL();
 0000005A  4800      LDR         R6,=0xFFFFF460
 0000005C  6837      LDR         R7,[R6,#0x0]
 0000005E  4800      LDR         R6,=0x100000
 00000060  43B7      BIC         R7,R6
 00000062  4800      LDR         R6,=0xFFFFF460
 00000064  6037      STR         R7,[R6,#0x0]
   56:             if(0x80 == (ControlValue & 0x80))
 00000066  AE00      ADD         R6,R13,#0x0
 00000068  7836      LDRB        R6,[R6,#0x0] ; ControlValue
 0000006A  2780      MOV         R7,#0x80
 0000006C  423E      TST         R6,R7
 0000006E  D006      BEQ         L_11  ; T=0x0000007E
   58:                 SET_SDO();      //Send one to DIN pin of ADIS16405
 00000070  4800      LDR         R6,=0xFFFFF460
 00000072  6837      LDR         R7,[R6,#0x0]
 00000074  4800      LDR         R6,=0x200000
 00000076  4337      ORR         R7,R6
 00000078  4800      LDR         R6,=0xFFFFF460
 0000007A  6037      STR         R7,[R6,#0x0]
   59:             }
 0000007C  E005      B           L_12  ; T=0x0000008A
 0000007E          L_11:
   62:                 CLR_SDO();      //Send zero to DIN pin of ADIS16405  
 0000007E  4800      LDR         R6,=0xFFFFF460
 00000080  6837      LDR         R7,[R6,#0x0]
 00000082  4800      LDR         R6,=0x200000
 00000084  43B7      BIC         R7,R6
 00000086  4800      LDR         R6,=0xFFFFF460
 00000088  6037      STR         R7,[R6,#0x0]
   63:             }
 0000008A          L_12:
   64:             __asm{nop;}
 0000008A  46C0      NOP         ; MOV R8,R8
   65:             SET_SCL();
 0000008C  4800      LDR         R6,=0xFFFFF460
 0000008E  6837      LDR         R7,[R6,#0x0]
 00000090  4800      LDR         R6,=0x100000
 00000092  4337      ORR         R7,R6
 00000094  4800      LDR         R6,=0xFFFFF460
 00000096  6037      STR         R7,[R6,#0x0]
   66:             __asm{nop;}
 00000098  46C0      NOP         ; MOV R8,R8
   67:             ControlValue <<= 1; //Rotate data   
 0000009A  AE00      ADD         R6,R13,#0x0
 0000009C  7837      LDRB        R7,[R6,#0x0] ; ControlValue
 0000009E  007F      LSL         R7,R7,#0x1
 000000A0  AE00      ADD         R6,R13,#0x0
 000000A2  7037      STRB        R7,[R6,#0x0] ; ControlValue
   68:         }
 000000A4  3301      ADD         R3,#0x1
 000000A6  061B      LSL         R3,R3,#0x18
 000000A8  0E1B      LSR         R3,R3,#0x18
ARM COMPILER V2.40c,  ADIS16405_IO                                                         22/04/10  16:31:52  PAGE 6   

 000000AA          L_8:
 000000AA  1C1E      MOV         R6,R3 ; i
 000000AC  0636      LSL         R6,R6,#0x18 ; i
 000000AE  0E36      LSR         R6,R6,#0x18
 000000B0  2E08      CMP         R6,#0x8
 000000B2  DBD2      BLT         L_9  ; T=0x0000005A
   70:         ValueToWrite = *(RegisterData + RegisterIndex);
 000000B4  1C23      MOV         R3,R4 ; RegisterIndex
 000000B6  061D      LSL         R5,R3,#0x18 ; RegisterIndex
 000000B8  0E2D      LSR         R5,R5,#0x18
 000000BA  1C13      MOV         R3,R2 ; RegisterData
 000000BC  5D5B      LDRB        R3,[R3,R5]
 000000BE  1C1D      MOV         R5,R3
   71:         for (i=0; i<8; i++)
 000000C0  2300      MOV         R3,#0x0
 000000C2  E022      B           L_15  ; T=0x0000010A
 000000C4          L_16:
   73:             CLR_SCL();
 000000C4  4800      LDR         R6,=0xFFFFF460
 000000C6  6837      LDR         R7,[R6,#0x0]
 000000C8  4800      LDR         R6,=0x100000
 000000CA  43B7      BIC         R7,R6
 000000CC  4800      LDR         R6,=0xFFFFF460
 000000CE  6037      STR         R7,[R6,#0x0]
   74:             if(0x80 == (ValueToWrite & 0x80))
 000000D0  1C2E      MOV         R6,R5 ; ValueToWrite
 000000D2  2780      MOV         R7,#0x80
 000000D4  423E      TST         R6,R7 ; ValueToWrite
 000000D6  D006      BEQ         L_18  ; T=0x000000E6
   76:                 SET_SDO();    //Send one to DIN pin of ADIS16405
 000000D8  4800      LDR         R6,=0xFFFFF460
 000000DA  6837      LDR         R7,[R6,#0x0]
 000000DC  4800      LDR         R6,=0x200000
 000000DE  4337      ORR         R7,R6
 000000E0  4800      LDR         R6,=0xFFFFF460
 000000E2  6037      STR         R7,[R6,#0x0]
   77:             }
 000000E4  E005      B           L_19  ; T=0x000000F2
 000000E6          L_18:
   80:                 CLR_SDO();    //Send zero to DIN pin of ADIS16405
 000000E6  4800      LDR         R6,=0xFFFFF460
 000000E8  6837      LDR         R7,[R6,#0x0]
 000000EA  4800      LDR         R6,=0x200000
 000000EC  43B7      BIC         R7,R6
 000000EE  4800      LDR         R6,=0xFFFFF460
 000000F0  6037      STR         R7,[R6,#0x0]
   81:             }
 000000F2          L_19:
   82:             __asm{nop;}
 000000F2  46C0      NOP         ; MOV R8,R8
   83:             SET_SCL();
 000000F4  4800      LDR         R6,=0xFFFFF460
 000000F6  6837      LDR         R7,[R6,#0x0]
 000000F8  4800      LDR         R6,=0x100000
 000000FA  4337      ORR         R7,R6
 000000FC  4800      LDR         R6,=0xFFFFF460
 000000FE  6037      STR         R7,[R6,#0x0]
   84:             __asm{nop;}
 00000100  46C0      NOP         ; MOV R8,R8
   85:             ValueToWrite <<= 1; //Rotate data
 00000102  006D      LSL         R5,R5,#0x1 ; ValueToWrite
   86:         }
 00000104  3301      ADD         R3,#0x1
 00000106  061B      LSL         R3,R3,#0x18
 00000108  0E1B      LSR         R3,R3,#0x18
 0000010A          L_15:
ARM COMPILER V2.40c,  ADIS16405_IO                                                         22/04/10  16:31:52  PAGE 7   

 0000010A  1C1E      MOV         R6,R3 ; i
 0000010C  0636      LSL         R6,R6,#0x18 ; i
 0000010E  0E36      LSR         R6,R6,#0x18
 00000110  2E08      CMP         R6,#0x8
 00000112  DBD7      BLT         L_16  ; T=0x000000C4
   87:         SET_CS();               //bring CS high again
 00000114  4800      LDR         R6,=0xFFFFF460
 00000116  6837      LDR         R7,[R6,#0x0]
 00000118  4800      LDR         R6,=0x80000
 0000011A  4337      ORR         R7,R6
 0000011C  4800      LDR         R6,=0xFFFFF460
 0000011E  6037      STR         R7,[R6,#0x0]
   88:     }
 00000120  3401      ADD         R4,#0x1
 00000122  0624      LSL         R4,R4,#0x18
 00000124  0E24      LSR         R4,R4,#0x18
 00000126          L_3:
 00000126  1C0E      MOV         R6,R1 ; NumberofRegisters
 00000128  0637      LSL         R7,R6,#0x18 ; NumberofRegisters
 0000012A  0E3F      LSR         R7,R7,#0x18
 0000012C  007F      LSL         R7,R7,#0x1
 0000012E  1C26      MOV         R6,R4 ; RegisterIndex
 00000130  0636      LSL         R6,R6,#0x18 ; RegisterIndex
 00000132  0E36      LSR         R6,R6,#0x18
 00000134  42BE      CMP         R6,R7
 00000136  DA00      BLT         $+4
 00000138  E76C      B           L_4  ; T=0x00000014
 0000013C            ; SCOPE-END
   89: }
 0000013C  B001      ADD         R13,#0x4
 0000013E  BCF0      POP         {R4-R7}
 00000140  4770      BX          R14
 00000142          ENDP ; 'WriteToADIS16405ViaSpi?T'


*** CODE SEGMENT '?PR?ReadFromADIS16405ViaSpi?T?ADIS16405_IO':
  101: void ReadFromADIS16405ViaSpi(unsigned char RegisterAddress, unsigned char NumberofRegisters, unsigned char *Regis
             -terData)
 00000000  B4F0      PUSH        {R4-R7}
 00000002  ---- Variable 'RegisterData' assigned to Register 'R2' ----
 00000002  ---- Variable 'NumberofRegisters' assigned to Register 'R1' ----
 00000002  ---- Variable 'RegisterAddress' assigned to Register 'R0' ----
 00000002  B083      SUB         R13,#0xC
  102: {
 00000004            ; SCOPE-START
  103:     unsigned    char    ControlValue = 0;
 00000004  2300      MOV         R3,#0x0
 00000006  AC00      ADD         R4,R13,#0x0
 00000008  7023      STRB        R3,[R4,#0x0] ; ControlValue
  104:     unsigned    char    RegisterIndex = 0;
 0000000A  AD01      ADD         R5,R13,#0x4
 0000000C  702B      STRB        R3,[R5,#0x0] ; RegisterIndex
  105:     unsigned    char    ReceiveData = 0;
 0000000E  1C1C      MOV         R4,R3 ; ReceiveData
 00000010  ---- Variable 'ReceiveData' assigned to Register 'R4' ----
  106:     unsigned    char    i = 0, j = 0;
 00000010  ---- Variable 'i' assigned to Register 'R3' ----
  107:     unsigned    int     iTemp = 0;
 00000010  2600      MOV         R6,#0x0
 00000012  9602      STR         R6,[R13,#0x8] ; iTemp
  109:     for(RegisterIndex=0; RegisterIndex<NumberofRegisters; RegisterIndex++)
 00000014  2600      MOV         R6,#0x0
 00000016  702E      STRB        R6,[R5,#0x0] ; RegisterIndex
 00000018  E094      B           L_22  ; T=0x00000144
 0000001A          L_23:
  112:         ControlValue = RegisterAddress + RegisterIndex*2;//every register of ADIS16405 takes up two bytes
 0000001A  AB01      ADD         R3,R13,#0x4
 0000001C  781B      LDRB        R3,[R3,#0x0] ; RegisterIndex
ARM COMPILER V2.40c,  ADIS16405_IO                                                         22/04/10  16:31:52  PAGE 8   

 0000001E  005B      LSL         R3,R3,#0x1
 00000020  1C05      MOV         R5,R0 ; RegisterAddress
 00000022  062D      LSL         R5,R5,#0x18 ; RegisterAddress
 00000024  0E2D      LSR         R5,R5,#0x18
 00000026  18ED      ADD         R5,R3
 00000028  062D      LSL         R5,R5,#0x18
 0000002A  0E2D      LSR         R5,R5,#0x18
 0000002C  AB00      ADD         R3,R13,#0x0
 0000002E  701D      STRB        R5,[R3,#0x0] ; ControlValue
  113:         SET_SCL();
 00000030  4800      LDR         R3,=0xFFFFF460
 00000032  681D      LDR         R5,[R3,#0x0]
 00000034  4800      LDR         R3,=0x100000
 00000036  431D      ORR         R5,R3
 00000038  4800      LDR         R3,=0xFFFFF460
 0000003A  601D      STR         R5,[R3,#0x0]
  114:         __asm{nop;}
 0000003C  46C0      NOP         ; MOV R8,R8
  115:         SET_CS();
 0000003E  4800      LDR         R3,=0xFFFFF460
 00000040  681E      LDR         R6,[R3,#0x0]
 00000042  4800      LDR         R3,=0x80000
 00000044  431E      ORR         R6,R3
 00000046  4800      LDR         R5,=0xFFFFF460
 00000048  602E      STR         R6,[R5,#0x0]
  116:         __asm{nop;}
 0000004A  46C0      NOP         ; MOV R8,R8
  117:         CLR_CS();    //bring CS low
 0000004C  4800      LDR         R5,=0xFFFFF460
 0000004E  682D      LDR         R5,[R5,#0x0]
 00000050  439D      BIC         R5,R3
 00000052  4800      LDR         R3,=0xFFFFF460
 00000054  601D      STR         R5,[R3,#0x0]
  118:         __asm{nop;}
 00000056  46C0      NOP         ; MOV R8,R8
  121:         for(i=0; i<8; i++)
 00000058  2300      MOV         R3,#0x0
 0000005A  E032      B           L_27  ; T=0x000000C2
 0000005C          L_28:
  123:             CLR_SCL();
 0000005C  4800      LDR         R5,=0xFFFFF460
 0000005E  682E      LDR         R6,[R5,#0x0]
 00000060  4800      LDR         R5,=0x100000
 00000062  43AE      BIC         R6,R5
 00000064  4800      LDR         R5,=0xFFFFF460
 00000066  602E      STR         R6,[R5,#0x0]
  124:             if(0x80 == (ControlValue & 0x80))
 00000068  AD00      ADD         R5,R13,#0x0
 0000006A  782E      LDRB        R6,[R5,#0x0] ; ControlValue
 0000006C  1C35      MOV         R5,R6
 0000006E  2780      MOV         R7,#0x80
 00000070  423D      TST         R5,R7
 00000072  D006      BEQ         L_30  ; T=0x00000082
  126:                 SET_SDO();    //Send one to DIN pin of ADIS16405
 00000074  4800      LDR         R5,=0xFFFFF460
 00000076  682F      LDR         R7,[R5,#0x0]
 00000078  4800      LDR         R5,=0x200000
 0000007A  432F      ORR         R7,R5
 0000007C  4800      LDR         R5,=0xFFFFF460
 0000007E  602F      STR         R7,[R5,#0x0]
  127:             }
 00000080  E005      B           L_31  ; T=0x0000008E
 00000082          L_30:
  130:                 CLR_SDO();    //Send zero to DIN pin of ADIS16405
 00000082  4800      LDR         R5,=0xFFFFF460
 00000084  682F      LDR         R7,[R5,#0x0]
ARM COMPILER V2.40c,  ADIS16405_IO                                                         22/04/10  16:31:52  PAGE 9   

 00000086  4800      LDR         R5,=0x200000
 00000088  43AF      BIC         R7,R5
 0000008A  4800      LDR         R5,=0xFFFFF460
 0000008C  602F      STR         R7,[R5,#0x0]
  131:             }
 0000008E          L_31:
  132:             __asm{nop;}
 0000008E  46C0      NOP         ; MOV R8,R8
  133:             SET_SCL();
 00000090  4800      LDR         R5,=0xFFFFF460
 00000092  682F      LDR         R7,[R5,#0x0]
 00000094  4800      LDR         R5,=0x100000
 00000096  432F      ORR         R7,R5
 00000098  4800      LDR         R5,=0xFFFFF460
 0000009A  602F      STR         R7,[R5,#0x0]
  134:             ReceiveData <<= 1;      //Rotate data
 0000009C  0064      LSL         R4,R4,#0x1 ; ReceiveData
 0000009E  0624      LSL         R4,R4,#0x18
 000000A0  0E24      LSR         R4,R4,#0x18
  135:             iTemp = GP0DAT;         //Read DOUT of ADIS16405
 000000A2  4800      LDR         R5,=0xFFFFF420
 000000A4  682D      LDR         R5,[R5,#0x0]
 000000A6  9502      STR         R5,[R13,#0x8] ; iTemp
  136:             if(0x00000020 == (iTemp & 0x00000020))
 000000A8  9D02      LDR         R5,[R13,#0x8] ; iTemp
 000000AA  2720      MOV         R7,#0x20
 000000AC  423D      TST         R5,R7
 000000AE  D001      BEQ         L_32  ; T=0x000000B4
  138:                 ReceiveData |= 1;   
 000000B0  2501      MOV         R5,#0x1
 000000B2  432C      ORR         R4,R5
  139:             }
 000000B4          L_32:
  140:             __asm{nop;}
 000000B4  46C0      NOP         ; MOV R8,R8
  141:             ControlValue <<= 1; //Rotate data
 000000B6  0076      LSL         R6,R6,#0x1
 000000B8  AD00      ADD         R5,R13,#0x0
 000000BA  702E      STRB        R6,[R5,#0x0] ; ControlValue
  142:         }
 000000BC  3301      ADD         R3,#0x1
 000000BE  061B      LSL         R3,R3,#0x18
 000000C0  0E1B      LSR         R3,R3,#0x18
 000000C2          L_27:
 000000C2  1C1D      MOV         R5,R3 ; i
 000000C4  062D      LSL         R5,R5,#0x18 ; i
 000000C6  0E2D      LSR         R5,R5,#0x18
 000000C8  2D08      CMP         R5,#0x8
 000000CA  DBC7      BLT         L_28  ; T=0x0000005C
  143:         *(RegisterData + RegisterIndex*2 + 1) = ReceiveData;
 000000CC  1C23      MOV         R3,R4 ; ReceiveData
 000000CE  AD01      ADD         R5,R13,#0x4
 000000D0  782D      LDRB        R5,[R5,#0x0] ; RegisterIndex
 000000D2  1C2E      MOV         R6,R5
 000000D4  0076      LSL         R6,R6,#0x1
 000000D6  1C15      MOV         R5,R2 ; RegisterData
 000000D8  19AD      ADD         R5,R6 ; RegisterData
 000000DA  706B      STRB        R3,[R5,#0x1]
  145:         for(i=0; i<8; i++)
 000000DC  2300      MOV         R3,#0x0
 000000DE  E01B      B           L_35  ; T=0x00000118
 000000E0          L_36:
  147:             CLR_SCL();
 000000E0  4800      LDR         R5,=0xFFFFF460
 000000E2  682F      LDR         R7,[R5,#0x0]
 000000E4  4800      LDR         R5,=0x100000
ARM COMPILER V2.40c,  ADIS16405_IO                                                         22/04/10  16:31:52  PAGE 10  

 000000E6  43AF      BIC         R7,R5
 000000E8  4800      LDR         R6,=0xFFFFF460
 000000EA  6037      STR         R7,[R6,#0x0]
  148:             __asm{nop;}
 000000EC  46C0      NOP         ; MOV R8,R8
  149:             SET_SCL();
 000000EE  4800      LDR         R6,=0xFFFFF460
 000000F0  6836      LDR         R6,[R6,#0x0]
 000000F2  432E      ORR         R6,R5
 000000F4  4800      LDR         R5,=0xFFFFF460
 000000F6  602E      STR         R6,[R5,#0x0]
  150:             ReceiveData <<= 1;      //Rotate data
 000000F8  0064      LSL         R4,R4,#0x1 ; ReceiveData
 000000FA  0624      LSL         R4,R4,#0x18
 000000FC  0E24      LSR         R4,R4,#0x18
  151:             iTemp = GP0DAT;         //Read DOUT of ADIS16405
 000000FE  4800      LDR         R5,=0xFFFFF420
 00000100  682D      LDR         R5,[R5,#0x0]
 00000102  9502      STR         R5,[R13,#0x8] ; iTemp
  152:             if(0x00000020 == (iTemp & 0x00000020))
 00000104  9D02      LDR         R5,[R13,#0x8] ; iTemp
 00000106  2620      MOV         R6,#0x20
 00000108  4235      TST         R5,R6
 0000010A  D001      BEQ         L_38  ; T=0x00000110
  154:                 ReceiveData |= 1;   
 0000010C  2501      MOV         R5,#0x1
 0000010E  432C      ORR         R4,R5
  155:             }
 00000110          L_38:
  156:             __asm{nop;}
 00000110  46C0      NOP         ; MOV R8,R8
  158:         }
 00000112  3301      ADD         R3,#0x1
 00000114  061B      LSL         R3,R3,#0x18
 00000116  0E1B      LSR         R3,R3,#0x18
 00000118          L_35:
 00000118  1C1D      MOV         R5,R3 ; i
 0000011A  062D      LSL         R5,R5,#0x18 ; i
 0000011C  0E2D      LSR         R5,R5,#0x18
 0000011E  2D08      CMP         R5,#0x8
 00000120  DBDE      BLT         L_36  ; T=0x000000E0
  159:         *(RegisterData + RegisterIndex*2) = ReceiveData;
 00000122  1C25      MOV         R5,R4 ; ReceiveData
 00000124  AE01      ADD         R6,R13,#0x4
 00000126  7836      LDRB        R6,[R6,#0x0] ; RegisterIndex
 00000128  1C37      MOV         R7,R6
 0000012A  007F      LSL         R7,R7,#0x1
 0000012C  1C16      MOV         R6,R2 ; RegisterData
 0000012E  55F5      STRB        R5,[R6,R7]
  160:         SET_CS();   //bring CS high again
 00000130  4800      LDR         R5,=0xFFFFF460
 00000132  682E      LDR         R6,[R5,#0x0]
 00000134  4800      LDR         R5,=0x80000
 00000136  432E      ORR         R6,R5
 00000138  4800      LDR         R5,=0xFFFFF460
 0000013A  602E      STR         R6,[R5,#0x0]
  161:     }
 0000013C  AD01      ADD         R5,R13,#0x4
 0000013E  782E      LDRB        R6,[R5,#0x0] ; RegisterIndex
 00000140  3601      ADD         R6,#0x1
 00000142  702E      STRB        R6,[R5,#0x0] ; RegisterIndex
 00000144          L_22:
 00000144  1C0D      MOV         R5,R1 ; NumberofRegisters
 00000146  062E      LSL         R6,R5,#0x18 ; NumberofRegisters
 00000148  0E36      LSR         R6,R6,#0x18
 0000014A  AD01      ADD         R5,R13,#0x4
ARM COMPILER V2.40c,  ADIS16405_IO                                                         22/04/10  16:31:52  PAGE 11  

 0000014C  782D      LDRB        R5,[R5,#0x0] ; RegisterIndex
 0000014E  42B5      CMP         R5,R6
 00000150  D200      BCC         $+4
 00000152  E762      B           L_23  ; T=0x0000001A
 00000156            ; SCOPE-END
  162: } 
 00000156  B003      ADD         R13,#0xC
 00000158  BCF0      POP         {R4-R7}
 0000015A  4770      BX          R14
 0000015C          ENDP ; 'ReadFromADIS16405ViaSpi?T'



Module Information          Static
----------------------------------
  code size            =    ------
  data size            =    ------
  const size           =    ------
End of Module Information.


ARM COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
